// Selections shit.
	// Rectangle for selection (mouse driven) 
	/*-
	private boolean drawSelectionRect=false;
	private int selectionRectX1;
	private int selectionRectY1;
	private int selectionRectX2;
	private int selectionRectY2;
	-*/
	// Selected arrays or instances
	//Set <InstanceOrArrayView> selectedArraysOrInstancesViews=new HashSet<InstanceOrArrayView>();
	

private InstanceOrArrayViewVisitor addSelectionRectangleToSelectedArraysOnInstancesVisitor=new InstanceOrArrayViewVisitor(){
		@Override
		public void visit(InstanceOrArrayView ioav) {
			int x1;
			int y1;
			int x2;
			int y2;
			if (selectionRectX1<selectionRectX2){
				x1=selectionRectX1;
				x2=selectionRectX2;
			}else{
				x1=selectionRectX2;
				x2=selectionRectX1;
			}
			if (selectionRectY1<selectionRectY2){
				y1=selectionRectY1;
				y2=selectionRectY2;
			}else{
				y1=selectionRectY2;
				y2=selectionRectY1;
			}
			if (!ioav.isSelected()&&ioav.isInRect(x1, y1, x2, y2)){
				ioav.select();
				selectedArraysOrInstancesViews.add(ioav);
			}
		}
	};
	void addSelectionRectangleToSelectedArraysOnInstances(){
		if (this.drawSelectionRect){
			this.accept(this.addSelectionRectangleToSelectedArraysOnInstancesVisitor);
		}else{
			Logger.getLogger("").logp(Level.WARNING,
					this.getClass().getName(), "addSelectionRectanglrToSelectedArraysOnInstances",
					"INTERNAL ERROR,  not selection rectangle avaiblable");
		}
	}
	void deselectAll(){
		for (InstanceOrArrayView ioav:this.selectedArraysOrInstancesViews){
			ioav.deselect();
		}
		this.selectedArraysOrInstancesViews.clear();
	}
	private InstanceOrArrayViewVisitor selectAllInstancesOrArraysVisitor=new InstanceOrArrayViewVisitor(){
		@Override
		public void visit(InstanceOrArrayView ioav) {
			addToSelection(ioav);
		}
	};
	void selectAll(){
		this.selectedArraysOrInstancesViews.clear(); //avoid useless membership check.
		this.accept(selectAllInstancesOrArraysVisitor);
	}
	void addToSelection(InstanceOrArrayView ioav){
		if (!ioav.isSelected()){
			ioav.select();
			this.selectedArraysOrInstancesViews.add(ioav);
		}
	}
	void translateSelection(int dx, int dy){
		for (InstanceOrArrayView ioav:this.selectedArraysOrInstancesViews){
			ioav.translate(dx, dy);
		}
		this.repaint();
	}
	
	
	
	
	
	private class _MouseListener extends MouseAdapter {	
		public void mousePressed(MouseEvent e) {
			if (e.getButton()==MouseEvent.BUTTON1){
				if (!e.isShiftDown()){
					deselectAll();
				}
				Component cp=e.getComponent(); // use this ?
				//cp.addMouseMotionListener(new _MouseMotionListener());	
				cp.addMouseMotionListener(mouseMotionListener);
				drawSelectionRect=true;
				selectionRectX1=e.getX();
				selectionRectY1= e.getY();
				selectionRectX2=selectionRectX1;
				selectionRectY2=selectionRectY1;
			}
			System.out.println(e);
		}
		public void mouseReleased(MouseEvent e){ 
			Component cp=e.getComponent();// cp is outer this !
			/**
			for(MouseMotionListener mml:cp.getMouseMotionListeners()){
				cp.removeMouseMotionListener(mml);
			}
			**/
			// Just clean up our listener
			cp.removeMouseMotionListener(mouseMotionListener);
			addSelectionRectangleToSelectedArraysOnInstances();
			drawSelectionRect=false;
			//cp.repaint(); // remove selection rectangle
			System.out.println(e);
		}
		 public void mouseEntered(MouseEvent e) {
			 System.out.println(e);
			
		 }
		 public void mouseExited(MouseEvent e) {
			 System.out.println(e);
		 }
	}//MouseListener
	
	private _MouseMotionListener mouseMotionListener=new _MouseMotionListener();
	private class _MouseMotionListener extends MouseMotionAdapter {
	    public void mouseDragged(MouseEvent e) {
	    	selectionRectX2=e.getX();
	    	selectionRectY1=e.getY();
	    	repaint(); 
	    }
	}// MouseMotionListener
	
	
	
	
	
	
	
	
	------------------------ Mouse Listeners for InstanceOrArrayView
	private class _MouseListener extends MouseAdapter {	
		private boolean pressed=false;
		public void mousePressed(MouseEvent e) {
			if (e.getButton()==MouseEvent.BUTTON1){
				if (!e.isShiftDown()){
					getMemoryView().deselectAll();
				}
				Component cp=e.getComponent();
				getMemoryView().addToSelection((InstanceOrArrayView)cp);
				cp.addMouseMotionListener(new _MouseMotionListener(e.getX(), e.getY()));		
				cp.setCursor(pressedCursor);
				pressed=true;
			}
		}
		public void mouseReleased(MouseEvent e){ 
			Component cp=e.getComponent();
			for(MouseMotionListener mml:cp.getMouseMotionListeners()){
				cp.removeMouseMotionListener(mml);
			}
			pressed=false;
			e.getComponent().setCursor(moveCursor);
			 // snapToGrid
			getMemoryView().snapToGrid(InstanceOrArrayView.this);
		}
		 public void mouseEntered(MouseEvent e) {
			 e.getComponent().setCursor((pressed)?pressedCursor:moveCursor);
		 }

		 public void mouseExited(MouseEvent e) {
			 e.getComponent().setCursor(Cursor.getDefaultCursor());
		 }
	}//MouseListener
	
	private class _MouseMotionListener extends MouseMotionAdapter {
		private int startX;
		private int startY;
		_MouseMotionListener(int startX, int startY){
			this.startX=startX;
			this.startY=startY;
		}

	    public void mouseDragged(MouseEvent e) {
	    	//translate(e.getX()-startX, e.getY()-startY);
	    	//getMemoryView().repaint(); // for arrow and other things...
	    	getMemoryView().translateSelection(e.getX()-startX, e.getY()-startY);
	    }
	}// MouseMotionListener